# Инкапсуляция

class A:
    # Переменная или метод, имеющее _,
    # не предназначен для использования вне методов класса,
    # однако атрибут доступен по этому имени.
    @staticmethod
    def _private():
        print('This is a private method!')


a = A()
a._private()


# Двойное подчеркивание в начале имени атрибута даёт большую защиту:
# атрибут становится недоступным по этому имени.

class B:
    def __private(self):
        print('This is a private method!')


b = B()
# b.__private()

# Обход ????????????????????????
# b._B__private()